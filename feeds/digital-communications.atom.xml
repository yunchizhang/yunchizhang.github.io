<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yzowledge - Digital Communications</title><link href="https://yunchizhang.github.io/" rel="alternate"></link><link href="https://yunchizhang.github.io/feeds/digital-communications.atom.xml" rel="self"></link><id>https://yunchizhang.github.io/</id><updated>2025-06-03T09:20:00-05:00</updated><subtitle>Knowledge and Experience</subtitle><entry><title>Galois Field and Reed-Solomon Coding</title><link href="https://yunchizhang.github.io/posts/galois_field_RS_coding.html" rel="alternate"></link><published>2025-06-03T09:20:00-05:00</published><updated>2025-06-03T09:20:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-06-03:/posts/galois_field_RS_coding.html</id><summary type="html">Describe details of Galois Field and Reed-Solomon Coding.</summary><content type="html">
&lt;main&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=61afe0f7"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h2 id="Galois-Fields-and-Its-Properties"&gt;Galois Fields and Its Properties&lt;a class="anchor-link" href="#Galois-Fields-and-Its-Properties"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Galois fields,  named after Evariste Galois also known as Finite Field,  is a mathematical concept
in abstract algebra that deals with finite mathematical structures. It is a set of numbers that
consists of a finite number of elements and has two operations, addition and multiplication, that
follow specific rules. The rules for these operations ensure that the Galois Field remains closed,
meaning that the result of any operation performed within the set will also be an element of the
set.&lt;/p&gt;
&lt;p&gt;The number of elements of a Galois field or finite field is called its order or, sometimes, its
size. A finite field of order $q$ exists if and only if $q$ is a prime power $p^m$ (where $p$ is a
prime number and $m$ is a positive integer). The Galois field is denoted as $GF(p^m)$. In a field
of order $q=p^m$, adding $p$ copies of any element always results in zero; that is, the
characteristic of the field is $p$.&lt;/p&gt;
&lt;p&gt;Sometimes $GF(p)$ is called Galois fields and $GF(p^m)$ is called the extended Galois fields.&lt;/p&gt;
&lt;h3 id="Properties-of-Galois-Field"&gt;Properties of Galois Field&lt;a class="anchor-link" href="#Properties-of-Galois-Field"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Finite Size: The most important property of a Galois Field is that it is finite. It has a
specific number of elements, and it is not possible to add any more elements to it. The size of
the field is represented by a prime number $p$.&lt;/li&gt;
&lt;li&gt;Closure: The Galois Field remains closed under both addition and multiplication operations,
meaning that the result of any operation performed within the set will always be an element of
the set.&lt;/li&gt;
&lt;li&gt;Commutative: The Galois Field is commutative under both addition and multiplication operations.
This means that the order of elements does not matter in performing operations. For example, $a+b
= b+a$ and $ab = ba$.&lt;/li&gt;
&lt;li&gt;Associative: The Galois Field is associative under both addition and multiplication operations.
This means that the grouping of elements in an operation does not matter. For example, $(a+b) + c
= a + (b+c)$ and $(ab) * c = a * (bc)$.&lt;/li&gt;
&lt;li&gt;Distributive: The Galois Field follows the distributive property. This means that multiplication
distributes over addition, i.e., $a * (b + c) = a * b + a * c$.&lt;/li&gt;
&lt;li&gt;Identity Elements: The Galois Field has two identity elements, 0 for addition and 1 for
multiplication. Any element added with 0 is equal to the original element, and any element
multiplied by 1 is equal to the original element.&lt;/li&gt;
&lt;li&gt;Inverse Elements: Every element in the Galois Field has an inverse element under both addition
and multiplication operations. The inverse element for addition is the negative of the original
element, and the inverse element for multiplication is the reciprocal of the original element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Binary Galois fields $GF(2^m)$ will be focused in the proceeding discussions.&lt;/p&gt;
&lt;h3 id="Explicit-Construction-of-$GF(p%5Em)$"&gt;Explicit Construction of $GF(p^m)$&lt;a class="anchor-link" href="#Explicit-Construction-of-$GF(p%5Em)$"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For $m&amp;gt;1$, one first chooses an irreducible polynomial (or primitive polynomial) $P(x)$ of degree
$m$. The elements of $GF(p^m)$ are the polynomials over $GF(p)$ whose degree is strictly less than
$m$. The addition and subtraction are those of polynomials over $GF(p)$. The product of two
elements is the remainder of the Euclidean division by $P(x)$ of the product. The multiplicative
inverse of a non-zero element may be computed with the extended Euclidean algorithm. Usually the
elements of $GF(p^m)$ is presented as polynomials in $\alpha$, where $P(\alpha)=0$.&lt;/p&gt;
&lt;p&gt;There might be several possible choices for $P(x)$.&lt;/p&gt;
&lt;h3 id="Field-Symbols-$%5Calpha-%5Ei$"&gt;Field Symbols $\alpha ^i$&lt;a class="anchor-link" href="#Field-Symbols-$%5Calpha-%5Ei$"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;$\alpha ^i$ can be used to denote each individual element within $GF(p^m)$. $\alpha(x)$ is called
the primitive element, often simply as $\alpha$. The consecutive powers of the primitive element
$\alpha$ is taken until the field elements start to repeat.&lt;/p&gt;
&lt;h3 id="Field-Element-Representations"&gt;Field Element Representations&lt;a class="anchor-link" href="#Field-Element-Representations"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Four representations are usually used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Power Representation&lt;/li&gt;
&lt;li&gt;Polynomial Representation&lt;/li&gt;
&lt;li&gt;Vector Representation&lt;/li&gt;
&lt;li&gt;Integer Representation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table demonstrates the four equivalent representations for $GF(2^4)$, where $\alpha =
x$.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:center"&gt;Power&lt;/th&gt;
&lt;th style="text-align:center"&gt;Polynomial&lt;/th&gt;
&lt;th style="text-align:center"&gt;Vector&lt;/th&gt;
&lt;th style="text-align:center"&gt;Integer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;0&lt;/td&gt;
&lt;td style="text-align:center"&gt;0&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0000)&lt;/td&gt;
&lt;td style="text-align:center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;1&lt;/td&gt;
&lt;td style="text-align:center"&gt;1&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0001)&lt;/td&gt;
&lt;td style="text-align:center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0010)&lt;/td&gt;
&lt;td style="text-align:center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^2$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x ^2$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0100)&lt;/td&gt;
&lt;td style="text-align:center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^3$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x ^3$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1000)&lt;/td&gt;
&lt;td style="text-align:center"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^4$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0011)&lt;/td&gt;
&lt;td style="text-align:center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^5$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^2+x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0110)&lt;/td&gt;
&lt;td style="text-align:center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^6$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1100)&lt;/td&gt;
&lt;td style="text-align:center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^7$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1011)&lt;/td&gt;
&lt;td style="text-align:center"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^8$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^2+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0101)&lt;/td&gt;
&lt;td style="text-align:center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^9$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1010)&lt;/td&gt;
&lt;td style="text-align:center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{10}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^2+x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0111)&lt;/td&gt;
&lt;td style="text-align:center"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{11}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2+x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1110)&lt;/td&gt;
&lt;td style="text-align:center"&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{12}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2+x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1111)&lt;/td&gt;
&lt;td style="text-align:center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{13}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1101)&lt;/td&gt;
&lt;td style="text-align:center"&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{14}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1001)&lt;/td&gt;
&lt;td style="text-align:center"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="Python-Examples"&gt;Python Examples&lt;a class="anchor-link" href="#Python-Examples"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python library &lt;a href="https://mhostetter.github.io/galois/latest/getting-started/"&gt;&lt;code&gt;galois&lt;/code&gt;&lt;/a&gt; is used in
the following examples. It can be installed as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;galois
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=5cbd5201"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;galois&lt;/span&gt;

&lt;span class="n"&gt;gf16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"All elements in different presentations:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tmp_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'α^&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tmp_str&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_print_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'All primitive elements:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Galois Field:
  name: GF(2^4)
  characteristic: 2
  degree: 4
  order: 16
  irreducible_poly: x^4 + x + 1
  is_primitive_poly: True
  primitive_element: x
--------------------------------------------
All elements in different presentations:
     0                    0     0
   α^0                    1     1
   α^1                    α     2
   α^2                  α^2     4
   α^3                  α^3     8
   α^4                α + 1     3
   α^5              α^2 + α     6
   α^6            α^3 + α^2    12
   α^7          α^3 + α + 1    11
   α^8              α^2 + 1     5
   α^9              α^3 + α    10
  α^10          α^2 + α + 1     7
  α^11        α^3 + α^2 + α    14
  α^12    α^3 + α^2 + α + 1    15
  α^13        α^3 + α^2 + 1    13
  α^14              α^3 + 1     9
--------------------------------------------
All primitive elements:
[ 2  3  4  5  9 11 13 14]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=dbed23fe"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Use different primitive element instead of X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gf16_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"All elements in different presentations:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tmp_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'α^&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tmp_str&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_print_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# use galois repr_table&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'---------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Using galois repr_table'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repr_table&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Use different primitive element instead of X
--------------------------------------------
Galois Field:
  name: GF(2^4)
  characteristic: 2
  degree: 4
  order: 16
  irreducible_poly: x^4 + x + 1
  is_primitive_poly: True
  primitive_element: x^2 + 1
--------------------------------------------
All elements in different presentations:
     0                    0     0
   α^0                    1     1
   α^1              x^2 + 1     5
   α^2                    x     2
   α^3              x^3 + x    10
   α^4                  x^2     4
   α^5          x^2 + x + 1     7
   α^6                  x^3     8
   α^7        x^3 + x^2 + x    14
   α^8                x + 1     3
   α^9    x^3 + x^2 + x + 1    15
  α^10              x^2 + x     6
  α^11        x^3 + x^2 + 1    13
  α^12            x^3 + x^2    12
  α^13              x^3 + 1     9
  α^14          x^3 + x + 1    11
---------------------------------------------
Using galois repr_table
    Power           Polynomial         Vector      Integer
-------------- ------------------- -------------- ---------
      0                 0           [0, 0, 0, 0]      0
 (x^2 + 1)^0            1           [0, 0, 0, 1]      1
 (x^2 + 1)^1         x^2 + 1        [0, 1, 0, 1]      5
 (x^2 + 1)^2            x           [0, 0, 1, 0]      2
 (x^2 + 1)^3         x^3 + x        [1, 0, 1, 0]      10
 (x^2 + 1)^4           x^2          [0, 1, 0, 0]      4
 (x^2 + 1)^5       x^2 + x + 1      [0, 1, 1, 1]      7
 (x^2 + 1)^6           x^3          [1, 0, 0, 0]      8
 (x^2 + 1)^7      x^3 + x^2 + x     [1, 1, 1, 0]      14
 (x^2 + 1)^8          x + 1         [0, 0, 1, 1]      3
 (x^2 + 1)^9    x^3 + x^2 + x + 1   [1, 1, 1, 1]      15
 (x^2 + 1)^10        x^2 + x        [0, 1, 1, 0]      6
 (x^2 + 1)^11     x^3 + x^2 + 1     [1, 1, 0, 1]      13
 (x^2 + 1)^12       x^3 + x^2       [1, 1, 0, 0]      12
 (x^2 + 1)^13        x^3 + 1        [1, 0, 0, 1]      9
 (x^2 + 1)^14      x^3 + x + 1      [1, 0, 1, 1]      11
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=e106b3c3"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h2 id="Reed-Solomon-(RS)-Coding"&gt;Reed Solomon (RS) Coding&lt;a class="anchor-link" href="#Reed-Solomon-(RS)-Coding"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RS codes are BCH codes which are a subset of cyclic block codes. Cyclic block codes are a subset of
linear block codes which are a subset of block codes which are a subset of error correction codes
in general. Therefore, RS codes are the great, great grandchildren of block codes. RS codes are
very efficient random and burst error correcting codes.&lt;/p&gt;
&lt;h3 id="RS-Encoder"&gt;RS Encoder&lt;a class="anchor-link" href="#RS-Encoder"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The parity-check information $CK(x)$ is obtained from the message information $M(x)$ by the
modulo-$g(x)$ function (generator function).&lt;/p&gt;
&lt;p&gt;$$CK(x)=x^{n-k}M(x)\ mod\ g(x)$$&lt;/p&gt;
&lt;p&gt;where $x^{n-k}$ is the displacement shift, $M(x)$ is the message, $g(x)$ is the generator that is
$n-k$ degree. The code
word is:&lt;/p&gt;
&lt;p&gt;$$C(x)=x^{n-k}M(x)+CK(x)$$&lt;/p&gt;
&lt;h3 id="Polynomial-Definations"&gt;Polynomial Definations&lt;a class="anchor-link" href="#Polynomial-Definations"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Message $M(x)$ consists of message symbols $M_i$:&lt;/p&gt;
&lt;p&gt;$$M(x)=M_{k-1}x^{k-1}+M_{k-2}x^{k-2}+...+M_1x+M_0$$&lt;/p&gt;
&lt;p&gt;Generator $g(x)$ consists of generator symbols:&lt;/p&gt;
&lt;p&gt;$$g(x)=x^{2t}+g_{2t-1}x^{2t-1}+...+g_1x+g_0$$&lt;/p&gt;
&lt;p&gt;where $n-k=2t$.&lt;/p&gt;
&lt;p&gt;Parity check $CK(x)$ consists of parity-check symbols $CK_i$:&lt;/p&gt;
&lt;p&gt;$$CK(x)=CK_{n-k-1}x^{n-k-1}+CK_{n-k-2}x^{n-k-2}+...+CK_1x+CK_0$$&lt;/p&gt;
&lt;p&gt;Code word $C(x)$ consists of code word symbols $C_i$:&lt;/p&gt;
&lt;p&gt;$$C(x) = x^{n-k}M(x)+CK(x)=M_{k-1}x^{n-1}+...+M_0x^{n-k}+CK_{n-k-1}x^{n-k-1}+...+CK_0$$&lt;/p&gt;
&lt;h3 id="$(n,k)$-RS-Codes"&gt;$(n,k)$ RS Codes&lt;a class="anchor-link" href="#$(n,k)$-RS-Codes"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Given the Galois Fields $GF(p^m)$, a set of RS codes with varying error correction capabilities,
block lengths, and rates can be constructed. A $(n,k)$ RS code is defined given the following
values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p$ (almost always 2)&lt;/li&gt;
&lt;li&gt;m&lt;/li&gt;
&lt;li&gt;n&lt;/li&gt;
&lt;li&gt;primitive polynomial $P(x)$ of $GF(p^m)$&lt;/li&gt;
&lt;li&gt;primitive element $\alpha(x)$ (almost always $\alpha(x)=x$)&lt;/li&gt;
&lt;li&gt;any primitive element of $\alpha ^ G$&lt;/li&gt;
&lt;li&gt;first consecutive root (FCR) for determining $g(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A primitive RS code has the following parameters over $GF(p^m)$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block length: $n=p^m-1$ (units are symbols)&lt;/li&gt;
&lt;li&gt;parity-check length: $n-k=2t$ (units are symbols)&lt;/li&gt;
&lt;li&gt;minimum distance: $d_{min}=2t+1$ (units are symbols)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="Generator-Polynomial-$g(x)$"&gt;Generator Polynomial $g(x)$&lt;a class="anchor-link" href="#Generator-Polynomial-$g(x)$"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The generator $g(x)$ for a primitive RS code can be determined as:&lt;/p&gt;
&lt;p&gt;$$g(x)=\prod_{i=FCR}^{FCR+2t-1}\left[x+\left(\alpha^G\right)^i\right]=\sum_{j=0}^{2t}g_jx^j=x^{2t}+g_{2t-1}x^{2t-1}+...+g_1x+g_0$$&lt;/p&gt;
&lt;h4 id="CCSDS-RS-Code-Generators"&gt;CCSDS RS Code Generators&lt;a class="anchor-link" href="#CCSDS-RS-Code-Generators"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;CCSDS RS code is based on $GF(2^8)$. The general characteristics are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$n=2^8-1=255$&lt;/li&gt;
&lt;li&gt;$P(x)=x^8+x^7+x^2+x+1$&lt;/li&gt;
&lt;li&gt;$t = 16$ for $(255, 223)$ RS code and $t=8$ for $(255,239)$ RS code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code generator $g(x)$ shall be:&lt;/p&gt;
&lt;p&gt;$$g(x)=\prod_{i=128-t}^{127+t}(x-\alpha^{11i})$$&lt;/p&gt;
&lt;p&gt;Python scripts to obtain $g(x)$:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=4b354ec9"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;irreducible_poly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'x^8 + x^7 + x^2 + x +1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;173&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# α^11 is 173&lt;/span&gt;

&lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fcr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;gxs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;gxs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gxs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fcr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator for t=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gxs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# use reed-solomon in galois&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Use ReedSolomon module in galois:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rs8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReedSolomon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator for t=8, (255, 239):'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rs16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReedSolomon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;223&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator for t=16, (255, 223):'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Generator for t=8:
[  1 165 105  27 159 104 152 101  74 101 152 104 159  27 105 165   1]
Generator for t=16:
[  1  91 127  86  16  30  13 235  97 165   8  42  54  86 171  32 113  32
 171  86  54  42   8 165  97 235  13  30  16  86 127  91   1]
------------------------------------
Use ReedSolomon module in galois:
Generator for t=8, (255, 239):
[  1 165 105  27 159 104 152 101  74 101 152 104 159  27 105 165   1]
Generator for t=16, (255, 223):
[  1  91 127  86  16  30  13 235  97 165   8  42  54  86 171  32 113  32
 171  86  54  42   8 165  97 235  13  30  16  86 127  91   1]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=fb182b93"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h3 id="Encoding-Example-of-RS(15,9)"&gt;Encoding Example of RS(15,9)&lt;a class="anchor-link" href="#Encoding-Example-of-RS(15,9)"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=0163eeb5"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;rs_15_9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReedSolomon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# generate randome symbols&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# using literal method&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-----------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Using polynomials to encode'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator polynomial is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# make polynomial from msg&lt;/span&gt;
&lt;span class="n"&gt;len_parity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;shift_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len_parity&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;msg_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;shift_poly&lt;/span&gt;
&lt;span class="n"&gt;ck_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg_poly&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;

&lt;span class="n"&gt;cw_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ck_poly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Encoded codeword using msg(x) &lt;/span&gt;&lt;span class="si"&gt;% g&lt;/span&gt;&lt;span class="s1"&gt;(x):'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw_poly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Galois Field:
  name: GF(2^4)
  characteristic: 2
  degree: 4
  order: 16
  irreducible_poly: x^4 + x + 1
  is_primitive_poly: True
  primitive_element: x
[ 9  0 10 12 12  3  4  3  2]
[ 9  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
-----------------------------
Using polynomials to encode
Generator polynomial is x^6 + 7x^5 + 9x^4 + 3x^3 + 12x^2 + 10x + 12
Encoded codeword using msg(x) % g(x):
[ 9  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=5695e6b9"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h3 id="RS-Decoder"&gt;RS Decoder&lt;a class="anchor-link" href="#RS-Decoder"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To be added.&lt;/p&gt;
&lt;h3 id="Decoding-Example-of-RS(15,-9)"&gt;Decoding Example of RS(15, 9)&lt;a class="anchor-link" href="#Decoding-Example-of-RS(15,-9)"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=401c9e61"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Corrupt the first symbol of &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Corrupted codeword:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dec_m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_corr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Decoded message:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec_m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Corrected errors: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_corr&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Equality against original message: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dec_m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Corrupt the first symbol of [ 9  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
Corrupted codeword:
[ 4  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
Decoded message:
[ 9  0 10 12 12  3  4  3  2]
Corrected errors: 1
Equality against original message: True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/main&gt;
</content><category term="Digital Communications"></category><category term="Galois Field, Digital, Communications"></category><category term="Galois Field, Reed-Solomon Coding, Digital Communications"></category></entry><entry><title>Linear Feedback Shift Register</title><link href="https://yunchizhang.github.io/posts/lfsr.html" rel="alternate"></link><published>2025-05-09T09:20:00-05:00</published><updated>2025-05-09T09:20:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-05-09:/posts/lfsr.html</id><summary type="html">&lt;p&gt;Describe details of linear feedback shift register (LFSR).&lt;/p&gt;</summary><content type="html">
&lt;p&gt;A linear-feedback shift register (LFSR) is a shift register whose input bit is a linear function of
its previous state.&lt;/p&gt;
&lt;p&gt;The most commonly used linear function of single bits is exclusive-or (XOR). Thus, an LFSR is most
often a shift register whose input bit is driven by the XOR of some bits of the overall shift
register value.&lt;/p&gt;
&lt;p&gt;Two implementation methods are usually considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple shift register generator (SSRG) or Fibonacci configuration&lt;/li&gt;
&lt;li&gt;Modular shift register generator (MSRG) or Galois configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fibonacci-configuration"&gt;Fibonacci Configuration&lt;/h2&gt;
&lt;p&gt;The following two diagrams illustrate the Fibonacci configurations of LFSR with register shifting
direction to LSB/Right and MSB/Left, respectively.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fibonacci Shifting to LSB" src="https://yunchizhang.github.io/digital_related/images/Fibonacci_LFSR_Shift_Right.png"/&gt;
&lt;img alt="Fibonacci Shifting to MSB" src="https://yunchizhang.github.io/digital_related/images/Fibonacci_LFSR_Shift_Left.png"/&gt;&lt;/p&gt;
&lt;p&gt;The polynomial &lt;span class="math"&gt;\(a\)&lt;/span&gt; or &lt;span class="math"&gt;\(b\)&lt;/span&gt; determines the feedback connections of the shift register. It is a primitive
binary polynomial in &lt;span class="math"&gt;\(x\)&lt;/span&gt;, &lt;span class="math"&gt;\(a_nx^n+a_{n–1}x^{n–1}+...+a_2x^2+a_1x^1+a_0\)&lt;/span&gt; or
&lt;span class="math"&gt;\(b_nx^n+b_{n–1}x^{n–1}+...+b_2x^2+b_1x^1+b_0\)&lt;/span&gt;. For the coefficient &lt;span class="math"&gt;\(a_{i}\)&lt;/span&gt; or &lt;span class="math"&gt;\(b_{i}\)&lt;/span&gt;, the
coefficient is &lt;em&gt;1&lt;/em&gt; if there is a connection from the &lt;em&gt;ith&lt;/em&gt; register to the adder. The leading term,
&lt;span class="math"&gt;\(a_n\)&lt;/span&gt; or &lt;span class="math"&gt;\(b_n\)&lt;/span&gt;, and the constant term, &lt;span class="math"&gt;\(a_0\)&lt;/span&gt; or &lt;span class="math"&gt;\(b_0\)&lt;/span&gt;, of the generator polynomial must be &lt;em&gt;1&lt;/em&gt;
because the polynomial must be primitive. At each time step, all &lt;em&gt;n&lt;/em&gt; registers in the generator
update their values according to the value of the incoming arrow to the shift register. The adders
perform addition modulo &lt;em&gt;2&lt;/em&gt;. The output of the LFSR reflects the sum of all connections in the &lt;em&gt;m&lt;/em&gt;
or &lt;em&gt;k&lt;/em&gt; mask vector.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;m&lt;/em&gt; or &lt;em&gt;k&lt;/em&gt; mask vector is optional. The output bit will be the bit shifted from the final
register at the shift direction if a mask vector is not provided.&lt;/p&gt;
&lt;p&gt;The two Fibonacci configurations are equivalent if &lt;span class="math"&gt;\(a_i=b_{n-i}\)&lt;/span&gt; and the initial seeds are mirror
imaged. For example, the maximum length sequence for a 7-bit LFSR should have &lt;span class="math"&gt;\(a_i=1\)&lt;/span&gt; at (7, 6, 0)
and &lt;span class="math"&gt;\(b_i=1\)&lt;/span&gt; at (7, 1, 0).&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The tap indices start from the right most position in the LFSR.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="galois-configuration"&gt;Galois Configuration&lt;/h2&gt;
&lt;p&gt;The following two diagrams illustrate the Galois configurations of LFSR with register shifting
direction to MSB/Left and LSB/Right, respectively.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Galois Shifting to MSB" src="https://yunchizhang.github.io/digital_related/images/Galois_LFSR_Shift_Left.png"/&gt;
&lt;img alt="Galois Shifting to LSB" src="https://yunchizhang.github.io/digital_related/images/Galois_LFSR_Shift_Right.png"/&gt;&lt;/p&gt;
&lt;p&gt;The Galois LFSR has the same output stream as the Fibonacci LFSR with a time/phase offset. So a
different start point will be needed to get the same output each cycle.&lt;/p&gt;
&lt;p&gt;Coefficients of Galois LFSR shifting to MSB should be identical as Fibonacci LFSR shifting to LSB
to generate the same sequence with a phase offset. Similarly for Galois LFSR shifting to LSB and
Fibonacci shifting to MSB.&lt;/p&gt;
&lt;h2 id="maximum-length-sequence-mls"&gt;Maximum Length Sequence (MLS)&lt;/h2&gt;
&lt;p&gt;The maximum sequence length is &lt;span class="math"&gt;\(2^n – 1\)&lt;/span&gt;. MLS have the following properties.&lt;/p&gt;
&lt;h3 id="balance-property"&gt;Balance Property&lt;/h3&gt;
&lt;p&gt;The occurrence of 0 and 1 in the sequence should be approximately the same. More precisely, in a
maximum length sequence of length &lt;span class="math"&gt;\(2^n-1\)&lt;/span&gt; there are &lt;span class="math"&gt;\(2^{n-1}\)&lt;/span&gt; ones and &lt;span class="math"&gt;\(2^{n-1}-1\)&lt;/span&gt; zeros. The
number of ones equals the number of zeros  plus one, since the state containing only zeros cannot
occur.&lt;/p&gt;
&lt;h3 id="run-property"&gt;Run Property&lt;/h3&gt;
&lt;p&gt;A "run" is a sub-sequence of consecutive "1"s or consecutive "0"s within the MLS concerned. The
number of runs is the number of such sub-sequences.&lt;/p&gt;
&lt;p&gt;Of all the "runs" (consisting of "1"s or "0"s) in the sequence :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One half of the runs are of length 1.&lt;/li&gt;
&lt;li&gt;One quarter of the runs are of length 2.&lt;/li&gt;
&lt;li&gt;One eighth of the runs are of length 3.&lt;/li&gt;
&lt;li&gt;... etc. ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="correlation-property"&gt;Correlation Property&lt;/h3&gt;
&lt;p&gt;The circular autocorrelation of an MLS is a Kronecker delta function (with DC offset and time
delay, depending on implementation). For the &lt;span class="math"&gt;\(\pm 1\)&lt;/span&gt; convention, i.e., bit value 1 is assigned
&lt;span class="math"&gt;\(s=+1\)&lt;/span&gt; and bit value 0 &lt;span class="math"&gt;\(s=-1\)&lt;/span&gt;, mapping XOR to the negative of the product:&lt;/p&gt;
&lt;div class="math"&gt;$$R(n)=\frac{1}{N}\sum_{m=1}^N s[m]s^*[m+n]_N=\begin{cases}1 &amp;amp; if\space n=0 \\ -\frac{1}{N} &amp;amp; if
\space 0&amp;lt;n&amp;lt;N\end{cases}$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(s^*\)&lt;/span&gt; represents a complex conjugate and &lt;span class="math"&gt;\([m+n]_N\)&lt;/span&gt; represents a circular shift.&lt;/p&gt;
&lt;p&gt;The linear autocorrelation of an MLS approximates a Kronecker delta.&lt;/p&gt;
&lt;p&gt;To generate a maximum length sequence for a generator polynomial that has the degree n, set
Polynomial to a value from the following table. The table is applied to Fibonacci Shifting to LSB
and Galois Shifting to MSB configurations. Counterpart values of &lt;span class="math"&gt;\(n-i\)&lt;/span&gt; should be used for the other
two configurations.&lt;/p&gt;
&lt;div class="custom-8col-table"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;[2 1 0]&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;[15 14 0]&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;[28 25 0]&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;[41 3 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;[3 2 0]&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;[16 15 13 4 0]&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;[29 27 0]&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;[42 23 22 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;[4 3 0]&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;[17 14 0]&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;[30 29 28 7 0]&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;[43 6 4 3 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;[5 3 0]&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;[18 11 0]&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;[31 28 0]&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;[44 6 5 2 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;[6 5 0]&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;[19 18 17 14 0]&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;[32 31 30 10 0]&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;[45 4 3 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;[7 6 0]&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;[20 17 0]&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;[33 20 0]&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;[46 21 10 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;[8 6 5 4 0]&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;[21 19 0]&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;[34 15 14 1 0]&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;[47 14 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;[9 5 0]&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;[22 21 0]&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;[35 2 0]&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;[48 28 27 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;[10 7 0]&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;[23 18 0]&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;[36 11 0]&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;[49 9 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;[11 9 0]&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;[24 23 22 17 0]&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;[37 12 10 2 0]&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;[50 4 3 2 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;[12 11 8 6 0]&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;[25 22 0]&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;[38 6 5 1 0]&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;[51 6 3 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;[13 12 10 9 0]&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;[26 25 24 20 0]&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;[39 8 0]&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;[52 3 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;[14 13 8 4 0]&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;[27 26 25 22 0]&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;[40 5 4 3 0]&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;[53 6 2 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Digital Communications"></category><category term="LFSR"></category><category term="Digital"></category><category term="Communications"></category></entry></feed>