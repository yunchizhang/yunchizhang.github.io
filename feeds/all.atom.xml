<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yzowledge</title><link href="https://yunchizhang.github.io/" rel="alternate"></link><link href="https://yunchizhang.github.io/feeds/all.atom.xml" rel="self"></link><id>https://yunchizhang.github.io/</id><updated>2025-08-17T11:08:00-05:00</updated><subtitle>Knowledge and Experience</subtitle><entry><title>Synchronizing Multiple Remote Repositories</title><link href="https://yunchizhang.github.io/posts/multi_remote_repos.html" rel="alternate"></link><published>2025-08-17T11:08:00-05:00</published><updated>2025-08-17T11:08:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-08-17:/posts/multi_remote_repos.html</id><summary type="html">&lt;p&gt;How to synchronize multiple remote repositories with a local one.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="multiple-remote-git-repositories"&gt;Multiple Remote Git Repositories&lt;/h2&gt;
&lt;p&gt;Synchronizing two remote Git repositories is often needed if, for example, you’re mirroring between
&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; and &lt;a href="https://gitlab.com"&gt;GitLab&lt;/a&gt;, or keeping a company’s internal Git server in sync with
a public one. There are several approaches depending on you needs. The following workflow is an example of having two
repositories (say GitHub + GitLab, or company server + external host) that both accept pushes, and developers might
push to either.&lt;/p&gt;
&lt;p&gt;That's what I'd call a &lt;em&gt;collaborative multi-remote workflow&lt;/em&gt;. The steps are:&lt;/p&gt;
&lt;h3 id="1-add-both-remotes"&gt;1. Add Both Remotes&lt;/h3&gt;
&lt;p&gt;Suppose you cloned from server A:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git@serverA:user/repo.git
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now add server B:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;serverB&lt;span class="w"&gt; &lt;/span&gt;git@serverB:user/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll now have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;origin&lt;/strong&gt; → server A&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;serverB&lt;/strong&gt; → server B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="2-keeping-both-in-sync"&gt;2. Keeping Both in Sync&lt;/h3&gt;
&lt;p&gt;Since developers may push to either, you’ll want to &lt;em&gt;fetch and merge/rebase&lt;/em&gt; changes from both regularly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Fetch all branches from both&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;fetch&lt;span class="w"&gt; &lt;/span&gt;origin
git&lt;span class="w"&gt; &lt;/span&gt;fetch&lt;span class="w"&gt; &lt;/span&gt;serverB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, update your local branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;main
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;serverB&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That merges in changes from both sides.
Then push back to both:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;serverB&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3-avoiding-divergence"&gt;3. Avoiding Divergence&lt;/h3&gt;
&lt;p&gt;If people are working on feature branches, do the same process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;feature-x
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;feature-x
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;serverB&lt;span class="w"&gt; &lt;/span&gt;feature-x
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;feature-x
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;serverB&lt;span class="w"&gt; &lt;/span&gt;feature-x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are conflicts, you’ll resolve them locally and push the resolved history to both remotes.&lt;/p&gt;
&lt;h3 id="4-automating-multi-push"&gt;4. Automating Multi-Push&lt;/h3&gt;
&lt;p&gt;You can configure Git so one push command updates both:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;set-url&lt;span class="w"&gt; &lt;/span&gt;--add&lt;span class="w"&gt; &lt;/span&gt;--push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;git@serverA:user/repo.git
git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;set-url&lt;span class="w"&gt; &lt;/span&gt;--add&lt;span class="w"&gt; &lt;/span&gt;--push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;git@serverB:user/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will push to both A and B.&lt;/p&gt;
&lt;p&gt;But pulls are still separate — you’ll need to git pull from both remotes, because Git doesn’t merge multiple fetches
automatically.&lt;/p&gt;
&lt;h3 id="5-best-practices"&gt;5. Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Decide on a primary remote for coordination (e.g., GitHub). Pull from both, but if conflicts arise, resolve and push to both.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use branch protection rules on both servers if you want consistent workflow (reviews, CI/CD, etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consider a CI job or hook to auto-sync branches (e.g., GitHub Action that pushes to GitLab). That way developers only need to push once.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Coding"></category><category term="repository"></category><category term="git"></category><category term="remote"></category></entry><entry><title>RF Mismatch Loss, Error and Uncertainty</title><link href="https://yunchizhang.github.io/posts/rf_mismatch_error.html" rel="alternate"></link><published>2025-07-14T09:20:00-05:00</published><updated>2025-07-14T09:20:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-07-14:/posts/rf_mismatch_error.html</id><summary type="html">&lt;p&gt;Analysis of RF mismatch between components.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;For maximum transfer of the power from any RF source component, the total input impedance of the
component connected to the source must be equal to the conjugate of the source impedance. In
practice, there is always some degree of impedance mismatch between the source and connected
component. The power loss due to the impedance mismatch is the mismatch loss. Mismatch loss in
transmission line theory is the amount of power expressed in decibels that will not be available on
the output due to impedance mismatches and reflections.&lt;/p&gt;
&lt;p&gt;The impedance mismatch is expressed in terms of reflection coefficient &lt;span class="math"&gt;\(\Gamma\)&lt;/span&gt;, voltage standing
wave ratio (&lt;em&gt;VSWR&lt;/em&gt;) and return loss (&lt;em&gt;RL&lt;/em&gt;). These quantities are interrelated:&lt;/p&gt;
&lt;div class="math"&gt;$$\Gamma=\frac{Z-Z_0}{Z+Z_0}$$&lt;/div&gt;
&lt;div class="math"&gt;$$|\Gamma|=\frac{VSWR-1}{VSWR+1}$$&lt;/div&gt;
&lt;div class="math"&gt;$$RL=-20\log_{10}|\Gamma|$$&lt;/div&gt;
&lt;p&gt;If there are two components in cascade, the resultant mismatch loss is not only due to the
mismatches from the individual components, but also from the reflections from each component and
their combination. The overall mismatch loss cannot be calculated by just adding up the individual
loss contributions from each component. Depending on how the multiple reflections combine, the
overall system loss may be lower or higher than the sum of the mismatch loss from each component.
The uncertainty associated in the evaluation of the mismatch error is known as the mismatch
uncertainty and expressed in dB.&lt;/p&gt;
&lt;h2 id="transducer-power-transfer-efficiency"&gt;Transducer Power Transfer Efficiency&lt;/h2&gt;
&lt;p&gt;For two cascaded RF components, defined as source and load, given:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source with output reflection coefficient &lt;span class="math"&gt;\(\Gamma_S\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Load with input reflection coefficient &lt;span class="math"&gt;\(\Gamma_L\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Source and Load are connected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(a\)&lt;/span&gt; be the incident wave toward the load and &lt;span class="math"&gt;\(b=\Gamma_La\)&lt;/span&gt; be the reflected wave from the load,
then the net power delivered to the load is:&lt;/p&gt;
&lt;div class="math"&gt;$$P_L=|a|^2-|b|^2=|a|^2(1-|\Gamma_L|^2)$$&lt;/div&gt;
&lt;p&gt;But &lt;span class="math"&gt;\(a\)&lt;/span&gt; is not necessarily equal to the wave that the source would deliver under matched
conditions. It is reduced due to reflection from the load and mismatch at the source.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(a\)&lt;/span&gt; can be written as a geometric series due to multiple reflections between source and load:&lt;/p&gt;
&lt;div class="math"&gt;$$a=a_S[1+\Gamma_S\Gamma_L+(\Gamma_S\Gamma_L)^2+...]=\frac{a_S}{1-\Gamma_S\Gamma_L}$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(a_S\)&lt;/span&gt; is the wave provided by the source.&lt;/p&gt;
&lt;p&gt;The delivered power is:&lt;/p&gt;
&lt;div class="math"&gt;$$P_L=|a|^2(1-|\Gamma_L|^2)=|a_S|^2\cdot \frac{1-|\Gamma_L|^2}{|1-\Gamma_S\Gamma_L|^2}$$&lt;/div&gt;
&lt;p&gt;The maximum available power from the source is the power the source would deliver if the load was
conjugately matched to it:&lt;/p&gt;
&lt;div class="math"&gt;$$P_{avail}=|a_S|^2\cdot
\frac{1-|\Gamma_S|^2}{|1-\Gamma_S\Gamma_S^*|^2}=\frac{|a_S|^2}{1-|\Gamma_S|^2}$$&lt;/div&gt;
&lt;p&gt;Therefore, the transducer power efficiency is:&lt;/p&gt;
&lt;div class="math"&gt;$$T=\frac{P_L}{P_{avail}}=|a_S|^2\cdot \frac{1-|\Gamma_L|^2}{|1-\Gamma_S\Gamma_L|^2}\cdot
\frac{1-|\Gamma_S|^2}{|a_S|^2}$$&lt;/div&gt;
&lt;div class="math"&gt;$$T=\frac{(1-|\Gamma_S|^2)(1-|\Gamma_L|^2)}{|1-\Gamma_S\Gamma_L|^2}$$&lt;/div&gt;
&lt;p&gt;The mismatch loss is:&lt;/p&gt;
&lt;div class="math"&gt;$$ML=\frac{1}{T}\Rightarrow ML_{dB}=-10\log_{10}T$$&lt;/div&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(Z_0\)&lt;/span&gt; mismatch losses associated with the source and the load are given by &lt;span class="math"&gt;\(1-|\Gamma_S|^2\)&lt;/span&gt; and
&lt;span class="math"&gt;\(1-|\Gamma_L|^2\)&lt;/span&gt;, respectively, while the uncertainty in the power transfer is given by &lt;span class="math"&gt;\(|1-\Gamma_S\Gamma_L|^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="mismatch-loss-and-uncertainty"&gt;Mismatch Loss and Uncertainty&lt;/h2&gt;
&lt;p&gt;In practical cascade analysis, the phase difference between source and load reflection coefficients
&lt;span class="math"&gt;\(\Gamma_S\)&lt;/span&gt; and &lt;span class="math"&gt;\(\Gamma_L\)&lt;/span&gt; is usually unknown, unless a full S-parameter or EM simulation is
available.&lt;/p&gt;
&lt;p&gt;The minimum and maximum power transfer efficiencies are:&lt;/p&gt;
&lt;div class="math"&gt;$$T_{min}=\frac{(1-|\Gamma_S|^2)(1-|\Gamma_L|^2)}{(1+|\Gamma_S||\Gamma_L|)^2}$$&lt;/div&gt;
&lt;div class="math"&gt;$$T_{max}=\frac{(1-|\Gamma_S|^2)(1-|\Gamma_L|^2)}{(1-|\Gamma_S||\Gamma_L|)^2}$$&lt;/div&gt;
&lt;p&gt;Assuming the phase between reflections is unknown and uniformly distributed over &lt;span class="math"&gt;\((0,2\pi)\)&lt;/span&gt;, the
typical-case or mean power transfer efficiency can be estimated.&lt;/p&gt;
&lt;p&gt;Let:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\gamma_S=|\Gamma_S|\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\gamma_L=|\Gamma_L|\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\theta=\angle(\Gamma_S\Gamma_L)\)&lt;/span&gt;, the unknown phase combination&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;div class="math"&gt;$$T(\theta)=\frac{(1-\gamma_S^2)(1-\gamma_L^2)}{1-2\gamma_S\gamma_L\cos(\theta)+\gamma_S^2\gamma_L^2}$$&lt;/div&gt;
&lt;p&gt;The mean power transfer efficiency is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$\bar{T}=\frac{1}{2\pi}\int_0^{2\pi}T(\theta)d\theta=\frac{(1-\gamma_S^2)(1-\gamma_L^2)}{1-\gamma_S^2\gamma_L^2}$$&lt;/div&gt;
&lt;p&gt;Therefore,&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{cases}T_{min}=\frac{(1-\gamma_S^2)(1-\gamma_L^2)}{(1+\gamma_S\gamma_L)^2} \\ \\
T_{typical}=\frac{(1-\gamma_S^2)(1-\gamma_L^2)}{1-\gamma_S^2\gamma_L^2} \\ \\
T_{max}=\frac{(1-\gamma_S^2)(1-\gamma_L^2)}{(1-\gamma_S\gamma_L)^2}\end{cases}$$&lt;/div&gt;
&lt;p&gt;The minimum and maximum mismatch losses are:&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{cases}ML_{dB,min}=-20\log_{10}T_{max} \\ \\ ML_{dB, typical}=-20\log_{10}T_{typical} \\ \\ ML_{dB,max}=-20\log_{10}T_{min}\end{cases}$$&lt;/div&gt;
&lt;p&gt;The uncertainty limits in the mismatch error is given in decibels (dB) by,&lt;/p&gt;
&lt;div class="math"&gt;$$20\log_{10}(1\pm \gamma_S\gamma_L)$$&lt;/div&gt;
&lt;p&gt;The power magnitude ripple in dB can be estimated as:&lt;/p&gt;
&lt;div class="math"&gt;$$ripple_{mag}=10\log_{10}\frac{1+\gamma_S\gamma_L}{1-\gamma_S\gamma_L}$$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="RF System"></category><category term="RF"></category><category term="Microwave"></category><category term="System"></category></entry><entry><title>Galois Field and Reed-Solomon Coding</title><link href="https://yunchizhang.github.io/posts/galois_field_RS_coding.html" rel="alternate"></link><published>2025-06-03T09:20:00-05:00</published><updated>2025-06-03T09:20:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-06-03:/posts/galois_field_RS_coding.html</id><summary type="html">Describe details of Galois Field and Reed-Solomon Coding.</summary><content type="html">
&lt;main&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=61afe0f7"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h2 id="Galois-Fields-and-Its-Properties"&gt;Galois Fields and Its Properties&lt;a class="anchor-link" href="#Galois-Fields-and-Its-Properties"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Galois fields,  named after Evariste Galois also known as Finite Field,  is a mathematical concept
in abstract algebra that deals with finite mathematical structures. It is a set of numbers that
consists of a finite number of elements and has two operations, addition and multiplication, that
follow specific rules. The rules for these operations ensure that the Galois Field remains closed,
meaning that the result of any operation performed within the set will also be an element of the
set.&lt;/p&gt;
&lt;p&gt;The number of elements of a Galois field or finite field is called its order or, sometimes, its
size. A finite field of order $q$ exists if and only if $q$ is a prime power $p^m$ (where $p$ is a
prime number and $m$ is a positive integer). The Galois field is denoted as $GF(p^m)$. In a field
of order $q=p^m$, adding $p$ copies of any element always results in zero; that is, the
characteristic of the field is $p$.&lt;/p&gt;
&lt;p&gt;Sometimes $GF(p)$ is called Galois fields and $GF(p^m)$ is called the extended Galois fields.&lt;/p&gt;
&lt;h3 id="Properties-of-Galois-Field"&gt;Properties of Galois Field&lt;a class="anchor-link" href="#Properties-of-Galois-Field"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Finite Size: The most important property of a Galois Field is that it is finite. It has a
specific number of elements, and it is not possible to add any more elements to it. The size of
the field is represented by a prime number $p$.&lt;/li&gt;
&lt;li&gt;Closure: The Galois Field remains closed under both addition and multiplication operations,
meaning that the result of any operation performed within the set will always be an element of
the set.&lt;/li&gt;
&lt;li&gt;Commutative: The Galois Field is commutative under both addition and multiplication operations.
This means that the order of elements does not matter in performing operations. For example, $a+b
= b+a$ and $ab = ba$.&lt;/li&gt;
&lt;li&gt;Associative: The Galois Field is associative under both addition and multiplication operations.
This means that the grouping of elements in an operation does not matter. For example, $(a+b) + c
= a + (b+c)$ and $(ab) * c = a * (bc)$.&lt;/li&gt;
&lt;li&gt;Distributive: The Galois Field follows the distributive property. This means that multiplication
distributes over addition, i.e., $a * (b + c) = a * b + a * c$.&lt;/li&gt;
&lt;li&gt;Identity Elements: The Galois Field has two identity elements, 0 for addition and 1 for
multiplication. Any element added with 0 is equal to the original element, and any element
multiplied by 1 is equal to the original element.&lt;/li&gt;
&lt;li&gt;Inverse Elements: Every element in the Galois Field has an inverse element under both addition
and multiplication operations. The inverse element for addition is the negative of the original
element, and the inverse element for multiplication is the reciprocal of the original element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Binary Galois fields $GF(2^m)$ will be focused in the proceeding discussions.&lt;/p&gt;
&lt;h3 id="Explicit-Construction-of-$GF(p%5Em)$"&gt;Explicit Construction of $GF(p^m)$&lt;a class="anchor-link" href="#Explicit-Construction-of-$GF(p%5Em)$"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For $m&amp;gt;1$, one first chooses an irreducible polynomial (or primitive polynomial) $P(x)$ of degree
$m$. The elements of $GF(p^m)$ are the polynomials over $GF(p)$ whose degree is strictly less than
$m$. The addition and subtraction are those of polynomials over $GF(p)$. The product of two
elements is the remainder of the Euclidean division by $P(x)$ of the product. The multiplicative
inverse of a non-zero element may be computed with the extended Euclidean algorithm. Usually the
elements of $GF(p^m)$ is presented as polynomials in $\alpha$, where $P(\alpha)=0$.&lt;/p&gt;
&lt;p&gt;There might be several possible choices for $P(x)$.&lt;/p&gt;
&lt;h3 id="Field-Symbols-$%5Calpha-%5Ei$"&gt;Field Symbols $\alpha ^i$&lt;a class="anchor-link" href="#Field-Symbols-$%5Calpha-%5Ei$"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;$\alpha ^i$ can be used to denote each individual element within $GF(p^m)$. $\alpha(x)$ is called
the primitive element, often simply as $\alpha$. The consecutive powers of the primitive element
$\alpha$ is taken until the field elements start to repeat.&lt;/p&gt;
&lt;h3 id="Field-Element-Representations"&gt;Field Element Representations&lt;a class="anchor-link" href="#Field-Element-Representations"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Four representations are usually used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Power Representation&lt;/li&gt;
&lt;li&gt;Polynomial Representation&lt;/li&gt;
&lt;li&gt;Vector Representation&lt;/li&gt;
&lt;li&gt;Integer Representation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table demonstrates the four equivalent representations for $GF(2^4)$, where $\alpha =
x$.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:center"&gt;Power&lt;/th&gt;
&lt;th style="text-align:center"&gt;Polynomial&lt;/th&gt;
&lt;th style="text-align:center"&gt;Vector&lt;/th&gt;
&lt;th style="text-align:center"&gt;Integer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;0&lt;/td&gt;
&lt;td style="text-align:center"&gt;0&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0000)&lt;/td&gt;
&lt;td style="text-align:center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;1&lt;/td&gt;
&lt;td style="text-align:center"&gt;1&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0001)&lt;/td&gt;
&lt;td style="text-align:center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0010)&lt;/td&gt;
&lt;td style="text-align:center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^2$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x ^2$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0100)&lt;/td&gt;
&lt;td style="text-align:center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^3$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x ^3$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1000)&lt;/td&gt;
&lt;td style="text-align:center"&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^4$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0011)&lt;/td&gt;
&lt;td style="text-align:center"&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^5$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^2+x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0110)&lt;/td&gt;
&lt;td style="text-align:center"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^6$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1100)&lt;/td&gt;
&lt;td style="text-align:center"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^7$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1011)&lt;/td&gt;
&lt;td style="text-align:center"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^8$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^2+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0101)&lt;/td&gt;
&lt;td style="text-align:center"&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^9$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1010)&lt;/td&gt;
&lt;td style="text-align:center"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{10}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^2+x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(0111)&lt;/td&gt;
&lt;td style="text-align:center"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{11}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2+x$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1110)&lt;/td&gt;
&lt;td style="text-align:center"&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{12}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2+x+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1111)&lt;/td&gt;
&lt;td style="text-align:center"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{13}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+x^2+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1101)&lt;/td&gt;
&lt;td style="text-align:center"&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center"&gt;$\alpha ^{14}$&lt;/td&gt;
&lt;td style="text-align:center"&gt;$x^3+1$&lt;/td&gt;
&lt;td style="text-align:center"&gt;(1001)&lt;/td&gt;
&lt;td style="text-align:center"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="Python-Examples"&gt;Python Examples&lt;a class="anchor-link" href="#Python-Examples"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python library &lt;a href="https://mhostetter.github.io/galois/latest/getting-started/"&gt;&lt;code&gt;galois&lt;/code&gt;&lt;/a&gt; is used in
the following examples. It can be installed as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;galois
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=5cbd5201"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;galois&lt;/span&gt;

&lt;span class="n"&gt;gf16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"All elements in different presentations:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tmp_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'α^&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tmp_str&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_print_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'All primitive elements:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Galois Field:
  name: GF(2^4)
  characteristic: 2
  degree: 4
  order: 16
  irreducible_poly: x^4 + x + 1
  is_primitive_poly: True
  primitive_element: x
--------------------------------------------
All elements in different presentations:
     0                    0     0
   α^0                    1     1
   α^1                    α     2
   α^2                  α^2     4
   α^3                  α^3     8
   α^4                α + 1     3
   α^5              α^2 + α     6
   α^6            α^3 + α^2    12
   α^7          α^3 + α + 1    11
   α^8              α^2 + 1     5
   α^9              α^3 + α    10
  α^10          α^2 + α + 1     7
  α^11        α^3 + α^2 + α    14
  α^12    α^3 + α^2 + α + 1    15
  α^13        α^3 + α^2 + 1    13
  α^14              α^3 + 1     9
--------------------------------------------
All primitive elements:
[ 2  3  4  5  9 11 13 14]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=dbed23fe"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Use different primitive element instead of X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gf16_5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"All elements in different presentations:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tmp_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'α^&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tmp_str&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_print_poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# use galois repr_table&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'---------------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Using galois repr_table'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf16_5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repr_table&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Use different primitive element instead of X
--------------------------------------------
Galois Field:
  name: GF(2^4)
  characteristic: 2
  degree: 4
  order: 16
  irreducible_poly: x^4 + x + 1
  is_primitive_poly: True
  primitive_element: x^2 + 1
--------------------------------------------
All elements in different presentations:
     0                    0     0
   α^0                    1     1
   α^1              x^2 + 1     5
   α^2                    x     2
   α^3              x^3 + x    10
   α^4                  x^2     4
   α^5          x^2 + x + 1     7
   α^6                  x^3     8
   α^7        x^3 + x^2 + x    14
   α^8                x + 1     3
   α^9    x^3 + x^2 + x + 1    15
  α^10              x^2 + x     6
  α^11        x^3 + x^2 + 1    13
  α^12            x^3 + x^2    12
  α^13              x^3 + 1     9
  α^14          x^3 + x + 1    11
---------------------------------------------
Using galois repr_table
    Power           Polynomial         Vector      Integer
-------------- ------------------- -------------- ---------
      0                 0           [0, 0, 0, 0]      0
 (x^2 + 1)^0            1           [0, 0, 0, 1]      1
 (x^2 + 1)^1         x^2 + 1        [0, 1, 0, 1]      5
 (x^2 + 1)^2            x           [0, 0, 1, 0]      2
 (x^2 + 1)^3         x^3 + x        [1, 0, 1, 0]      10
 (x^2 + 1)^4           x^2          [0, 1, 0, 0]      4
 (x^2 + 1)^5       x^2 + x + 1      [0, 1, 1, 1]      7
 (x^2 + 1)^6           x^3          [1, 0, 0, 0]      8
 (x^2 + 1)^7      x^3 + x^2 + x     [1, 1, 1, 0]      14
 (x^2 + 1)^8          x + 1         [0, 0, 1, 1]      3
 (x^2 + 1)^9    x^3 + x^2 + x + 1   [1, 1, 1, 1]      15
 (x^2 + 1)^10        x^2 + x        [0, 1, 1, 0]      6
 (x^2 + 1)^11     x^3 + x^2 + 1     [1, 1, 0, 1]      13
 (x^2 + 1)^12       x^3 + x^2       [1, 1, 0, 0]      12
 (x^2 + 1)^13        x^3 + 1        [1, 0, 0, 1]      9
 (x^2 + 1)^14      x^3 + x + 1      [1, 0, 1, 1]      11
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=e106b3c3"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h2 id="Reed-Solomon-(RS)-Coding"&gt;Reed Solomon (RS) Coding&lt;a class="anchor-link" href="#Reed-Solomon-(RS)-Coding"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RS codes are BCH codes which are a subset of cyclic block codes. Cyclic block codes are a subset of
linear block codes which are a subset of block codes which are a subset of error correction codes
in general. Therefore, RS codes are the great, great grandchildren of block codes. RS codes are
very efficient random and burst error correcting codes.&lt;/p&gt;
&lt;h3 id="RS-Encoder"&gt;RS Encoder&lt;a class="anchor-link" href="#RS-Encoder"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The parity-check information $CK(x)$ is obtained from the message information $M(x)$ by the
modulo-$g(x)$ function (generator function).&lt;/p&gt;
&lt;p&gt;$$CK(x)=x^{n-k}M(x)\ mod\ g(x)$$&lt;/p&gt;
&lt;p&gt;where $x^{n-k}$ is the displacement shift, $M(x)$ is the message, $g(x)$ is the generator that is
$n-k$ degree. The code
word is:&lt;/p&gt;
&lt;p&gt;$$C(x)=x^{n-k}M(x)+CK(x)$$&lt;/p&gt;
&lt;h3 id="Polynomial-Definations"&gt;Polynomial Definations&lt;a class="anchor-link" href="#Polynomial-Definations"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Message $M(x)$ consists of message symbols $M_i$:&lt;/p&gt;
&lt;p&gt;$$M(x)=M_{k-1}x^{k-1}+M_{k-2}x^{k-2}+...+M_1x+M_0$$&lt;/p&gt;
&lt;p&gt;Generator $g(x)$ consists of generator symbols:&lt;/p&gt;
&lt;p&gt;$$g(x)=x^{2t}+g_{2t-1}x^{2t-1}+...+g_1x+g_0$$&lt;/p&gt;
&lt;p&gt;where $n-k=2t$.&lt;/p&gt;
&lt;p&gt;Parity check $CK(x)$ consists of parity-check symbols $CK_i$:&lt;/p&gt;
&lt;p&gt;$$CK(x)=CK_{n-k-1}x^{n-k-1}+CK_{n-k-2}x^{n-k-2}+...+CK_1x+CK_0$$&lt;/p&gt;
&lt;p&gt;Code word $C(x)$ consists of code word symbols $C_i$:&lt;/p&gt;
&lt;p&gt;$$C(x) = x^{n-k}M(x)+CK(x)=M_{k-1}x^{n-1}+...+M_0x^{n-k}+CK_{n-k-1}x^{n-k-1}+...+CK_0$$&lt;/p&gt;
&lt;h3 id="$(n,k)$-RS-Codes"&gt;$(n,k)$ RS Codes&lt;a class="anchor-link" href="#$(n,k)$-RS-Codes"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Given the Galois Fields $GF(p^m)$, a set of RS codes with varying error correction capabilities,
block lengths, and rates can be constructed. A $(n,k)$ RS code is defined given the following
values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p$ (almost always 2)&lt;/li&gt;
&lt;li&gt;m&lt;/li&gt;
&lt;li&gt;n&lt;/li&gt;
&lt;li&gt;primitive polynomial $P(x)$ of $GF(p^m)$&lt;/li&gt;
&lt;li&gt;primitive element $\alpha(x)$ (almost always $\alpha(x)=x$)&lt;/li&gt;
&lt;li&gt;any primitive element of $\alpha ^ G$&lt;/li&gt;
&lt;li&gt;first consecutive root (FCR) for determining $g(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A primitive RS code has the following parameters over $GF(p^m)$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block length: $n=p^m-1$ (units are symbols)&lt;/li&gt;
&lt;li&gt;parity-check length: $n-k=2t$ (units are symbols)&lt;/li&gt;
&lt;li&gt;minimum distance: $d_{min}=2t+1$ (units are symbols)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="Generator-Polynomial-$g(x)$"&gt;Generator Polynomial $g(x)$&lt;a class="anchor-link" href="#Generator-Polynomial-$g(x)$"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The generator $g(x)$ for a primitive RS code can be determined as:&lt;/p&gt;
&lt;p&gt;$$g(x)=\prod_{i=FCR}^{FCR+2t-1}\left[x+\left(\alpha^G\right)^i\right]=\sum_{j=0}^{2t}g_jx^j=x^{2t}+g_{2t-1}x^{2t-1}+...+g_1x+g_0$$&lt;/p&gt;
&lt;h4 id="CCSDS-RS-Code-Generators"&gt;CCSDS RS Code Generators&lt;a class="anchor-link" href="#CCSDS-RS-Code-Generators"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;CCSDS RS code is based on $GF(2^8)$. The general characteristics are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$n=2^8-1=255$&lt;/li&gt;
&lt;li&gt;$P(x)=x^8+x^7+x^2+x+1$&lt;/li&gt;
&lt;li&gt;$t = 16$ for $(255, 223)$ RS code and $t=8$ for $(255,239)$ RS code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code generator $g(x)$ shall be:&lt;/p&gt;
&lt;p&gt;$$g(x)=\prod_{i=128-t}^{127+t}(x-\alpha^{11i})$$&lt;/p&gt;
&lt;p&gt;Python scripts to obtain $g(x)$:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=4b354ec9"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;irreducible_poly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'x^8 + x^7 + x^2 + x +1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;173&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# α^11 is 173&lt;/span&gt;

&lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fcr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;gxs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;gxs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gxs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primitive_element&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fcr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator for t=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gxs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# use reed-solomon in galois&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'------------------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Use ReedSolomon module in galois:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rs8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReedSolomon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator for t=8, (255, 239):'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rs16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReedSolomon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;223&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator for t=16, (255, 223):'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs16&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Generator for t=8:
[  1 165 105  27 159 104 152 101  74 101 152 104 159  27 105 165   1]
Generator for t=16:
[  1  91 127  86  16  30  13 235  97 165   8  42  54  86 171  32 113  32
 171  86  54  42   8 165  97 235  13  30  16  86 127  91   1]
------------------------------------
Use ReedSolomon module in galois:
Generator for t=8, (255, 239):
[  1 165 105  27 159 104 152 101  74 101 152 104 159  27 105 165   1]
Generator for t=16, (255, 223):
[  1  91 127  86  16  30  13 235  97 165   8  42  54  86 171  32 113  32
 171  86  54  42   8 165  97 235  13  30  16  86 127  91   1]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=fb182b93"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h3 id="Encoding-Example-of-RS(15,9)"&gt;Encoding Example of RS(15,9)&lt;a class="anchor-link" href="#Encoding-Example-of-RS(15,9)"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=0163eeb5"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;rs_15_9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReedSolomon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# generate randome symbols&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# using literal method&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-----------------------------'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Using polynomials to encode'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Generator polynomial is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# make polynomial from msg&lt;/span&gt;
&lt;span class="n"&gt;len_parity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;shift_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len_parity&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gf_rs_15_9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;msg_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;galois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;shift_poly&lt;/span&gt;
&lt;span class="n"&gt;ck_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg_poly&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generator_poly&lt;/span&gt;

&lt;span class="n"&gt;cw_poly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ck_poly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Encoded codeword using msg(x) &lt;/span&gt;&lt;span class="si"&gt;% g&lt;/span&gt;&lt;span class="s1"&gt;(x):'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw_poly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Galois Field:
  name: GF(2^4)
  characteristic: 2
  degree: 4
  order: 16
  irreducible_poly: x^4 + x + 1
  is_primitive_poly: True
  primitive_element: x
[ 9  0 10 12 12  3  4  3  2]
[ 9  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
-----------------------------
Using polynomials to encode
Generator polynomial is x^6 + 7x^5 + 9x^4 + 3x^3 + 12x^2 + 10x + 12
Encoded codeword using msg(x) % g(x):
[ 9  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell jp-MarkdownCell jp-Notebook-cell" id="cell-id=5695e6b9"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;
&lt;/div&gt;&lt;div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput" data-mime-type="text/markdown"&gt;
&lt;h3 id="RS-Decoder"&gt;RS Decoder&lt;a class="anchor-link" href="#RS-Decoder"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To be added.&lt;/p&gt;
&lt;h3 id="Decoding-Example-of-RS(15,-9)"&gt;Decoding Example of RS(15, 9)&lt;a class="anchor-link" href="#Decoding-Example-of-RS(15,-9)"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="jp-Cell jp-CodeCell jp-Notebook-cell" id="cell-id=401c9e61"&gt;
&lt;div class="jp-Cell-inputWrapper" tabindex="0"&gt;
&lt;div class="jp-Collapser jp-InputCollapser jp-Cell-inputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-InputArea jp-Cell-inputArea"&gt;
&lt;div class="jp-InputPrompt jp-InputArea-prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline"&gt;
&lt;div class="cm-editor cm-s-jupyter"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Corrupt the first symbol of &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Corrupted codeword:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dec_m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_corr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs_15_9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Decoded message:'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec_m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Corrected errors: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_corr&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'Equality against original message: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dec_m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="jp-Cell-outputWrapper"&gt;
&lt;div class="jp-Collapser jp-OutputCollapser jp-Cell-outputCollapser"&gt;
&lt;/div&gt;
&lt;div class="jp-OutputArea jp-Cell-outputArea"&gt;
&lt;div class="jp-OutputArea-child"&gt;
&lt;div class="jp-OutputPrompt jp-OutputArea-prompt"&gt;&lt;/div&gt;
&lt;div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain" tabindex="0"&gt;
&lt;pre&gt;Corrupt the first symbol of [ 9  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
Corrupted codeword:
[ 4  0 10 12 12  3  4  3  2 12 13  2  6  6  6]
Decoded message:
[ 9  0 10 12 12  3  4  3  2]
Corrected errors: 1
Equality against original message: True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/main&gt;
</content><category term="Digital Communications"></category><category term="Galois Field, Digital, Communications"></category><category term="Galois Field, Reed-Solomon Coding, Digital Communications"></category></entry><entry><title>Linear Feedback Shift Register</title><link href="https://yunchizhang.github.io/posts/lfsr.html" rel="alternate"></link><published>2025-05-09T09:20:00-05:00</published><updated>2025-05-09T09:20:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-05-09:/posts/lfsr.html</id><summary type="html">&lt;p&gt;Describe details of linear feedback shift register (LFSR).&lt;/p&gt;</summary><content type="html">
&lt;p&gt;A linear-feedback shift register (LFSR) is a shift register whose input bit is a linear function of
its previous state.&lt;/p&gt;
&lt;p&gt;The most commonly used linear function of single bits is exclusive-or (XOR). Thus, an LFSR is most
often a shift register whose input bit is driven by the XOR of some bits of the overall shift
register value.&lt;/p&gt;
&lt;p&gt;Two implementation methods are usually considered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple shift register generator (SSRG) or Fibonacci configuration&lt;/li&gt;
&lt;li&gt;Modular shift register generator (MSRG) or Galois configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fibonacci-configuration"&gt;Fibonacci Configuration&lt;/h2&gt;
&lt;p&gt;The following two diagrams illustrate the Fibonacci configurations of LFSR with register shifting
direction to LSB/Right and MSB/Left, respectively.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fibonacci Shifting to LSB" src="https://yunchizhang.github.io/digital_related/images/Fibonacci_LFSR_Shift_Right.png"/&gt;
&lt;img alt="Fibonacci Shifting to MSB" src="https://yunchizhang.github.io/digital_related/images/Fibonacci_LFSR_Shift_Left.png"/&gt;&lt;/p&gt;
&lt;p&gt;The polynomial &lt;span class="math"&gt;\(a\)&lt;/span&gt; or &lt;span class="math"&gt;\(b\)&lt;/span&gt; determines the feedback connections of the shift register. It is a primitive
binary polynomial in &lt;span class="math"&gt;\(x\)&lt;/span&gt;, &lt;span class="math"&gt;\(a_nx^n+a_{n–1}x^{n–1}+...+a_2x^2+a_1x^1+a_0\)&lt;/span&gt; or
&lt;span class="math"&gt;\(b_nx^n+b_{n–1}x^{n–1}+...+b_2x^2+b_1x^1+b_0\)&lt;/span&gt;. For the coefficient &lt;span class="math"&gt;\(a_{i}\)&lt;/span&gt; or &lt;span class="math"&gt;\(b_{i}\)&lt;/span&gt;, the
coefficient is &lt;em&gt;1&lt;/em&gt; if there is a connection from the &lt;em&gt;ith&lt;/em&gt; register to the adder. The leading term,
&lt;span class="math"&gt;\(a_n\)&lt;/span&gt; or &lt;span class="math"&gt;\(b_n\)&lt;/span&gt;, and the constant term, &lt;span class="math"&gt;\(a_0\)&lt;/span&gt; or &lt;span class="math"&gt;\(b_0\)&lt;/span&gt;, of the generator polynomial must be &lt;em&gt;1&lt;/em&gt;
because the polynomial must be primitive. At each time step, all &lt;em&gt;n&lt;/em&gt; registers in the generator
update their values according to the value of the incoming arrow to the shift register. The adders
perform addition modulo &lt;em&gt;2&lt;/em&gt;. The output of the LFSR reflects the sum of all connections in the &lt;em&gt;m&lt;/em&gt;
or &lt;em&gt;k&lt;/em&gt; mask vector.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;m&lt;/em&gt; or &lt;em&gt;k&lt;/em&gt; mask vector is optional. The output bit will be the bit shifted from the final
register at the shift direction if a mask vector is not provided.&lt;/p&gt;
&lt;p&gt;The two Fibonacci configurations are equivalent if &lt;span class="math"&gt;\(a_i=b_{n-i}\)&lt;/span&gt; and the initial seeds are mirror
imaged. For example, the maximum length sequence for a 7-bit LFSR should have &lt;span class="math"&gt;\(a_i=1\)&lt;/span&gt; at (7, 6, 0)
and &lt;span class="math"&gt;\(b_i=1\)&lt;/span&gt; at (7, 1, 0).&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The tap indices start from the right most position in the LFSR.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="galois-configuration"&gt;Galois Configuration&lt;/h2&gt;
&lt;p&gt;The following two diagrams illustrate the Galois configurations of LFSR with register shifting
direction to MSB/Left and LSB/Right, respectively.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Galois Shifting to MSB" src="https://yunchizhang.github.io/digital_related/images/Galois_LFSR_Shift_Left.png"/&gt;
&lt;img alt="Galois Shifting to LSB" src="https://yunchizhang.github.io/digital_related/images/Galois_LFSR_Shift_Right.png"/&gt;&lt;/p&gt;
&lt;p&gt;The Galois LFSR has the same output stream as the Fibonacci LFSR with a time/phase offset. So a
different start point will be needed to get the same output each cycle.&lt;/p&gt;
&lt;p&gt;Coefficients of Galois LFSR shifting to MSB should be identical as Fibonacci LFSR shifting to LSB
to generate the same sequence with a phase offset. Similarly for Galois LFSR shifting to LSB and
Fibonacci shifting to MSB.&lt;/p&gt;
&lt;h2 id="maximum-length-sequence-mls"&gt;Maximum Length Sequence (MLS)&lt;/h2&gt;
&lt;p&gt;The maximum sequence length is &lt;span class="math"&gt;\(2^n – 1\)&lt;/span&gt;. MLS have the following properties.&lt;/p&gt;
&lt;h3 id="balance-property"&gt;Balance Property&lt;/h3&gt;
&lt;p&gt;The occurrence of 0 and 1 in the sequence should be approximately the same. More precisely, in a
maximum length sequence of length &lt;span class="math"&gt;\(2^n-1\)&lt;/span&gt; there are &lt;span class="math"&gt;\(2^{n-1}\)&lt;/span&gt; ones and &lt;span class="math"&gt;\(2^{n-1}-1\)&lt;/span&gt; zeros. The
number of ones equals the number of zeros  plus one, since the state containing only zeros cannot
occur.&lt;/p&gt;
&lt;h3 id="run-property"&gt;Run Property&lt;/h3&gt;
&lt;p&gt;A "run" is a sub-sequence of consecutive "1"s or consecutive "0"s within the MLS concerned. The
number of runs is the number of such sub-sequences.&lt;/p&gt;
&lt;p&gt;Of all the "runs" (consisting of "1"s or "0"s) in the sequence :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One half of the runs are of length 1.&lt;/li&gt;
&lt;li&gt;One quarter of the runs are of length 2.&lt;/li&gt;
&lt;li&gt;One eighth of the runs are of length 3.&lt;/li&gt;
&lt;li&gt;... etc. ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="correlation-property"&gt;Correlation Property&lt;/h3&gt;
&lt;p&gt;The circular autocorrelation of an MLS is a Kronecker delta function (with DC offset and time
delay, depending on implementation). For the &lt;span class="math"&gt;\(\pm 1\)&lt;/span&gt; convention, i.e., bit value 1 is assigned
&lt;span class="math"&gt;\(s=+1\)&lt;/span&gt; and bit value 0 &lt;span class="math"&gt;\(s=-1\)&lt;/span&gt;, mapping XOR to the negative of the product:&lt;/p&gt;
&lt;div class="math"&gt;$$R(n)=\frac{1}{N}\sum_{m=1}^N s[m]s^*[m+n]_N=\begin{cases}1 &amp;amp; if\space n=0 \\ -\frac{1}{N} &amp;amp; if
\space 0&amp;lt;n&amp;lt;N\end{cases}$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(s^*\)&lt;/span&gt; represents a complex conjugate and &lt;span class="math"&gt;\([m+n]_N\)&lt;/span&gt; represents a circular shift.&lt;/p&gt;
&lt;p&gt;The linear autocorrelation of an MLS approximates a Kronecker delta.&lt;/p&gt;
&lt;p&gt;To generate a maximum length sequence for a generator polynomial that has the degree n, set
Polynomial to a value from the following table. The table is applied to Fibonacci Shifting to LSB
and Galois Shifting to MSB configurations. Counterpart values of &lt;span class="math"&gt;\(n-i\)&lt;/span&gt; should be used for the other
two configurations.&lt;/p&gt;
&lt;div class="custom-8col-table"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Generator Polynomial&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;[2 1 0]&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;[15 14 0]&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;[28 25 0]&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;[41 3 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;[3 2 0]&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;[16 15 13 4 0]&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;[29 27 0]&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;[42 23 22 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;[4 3 0]&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;[17 14 0]&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;[30 29 28 7 0]&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;[43 6 4 3 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;[5 3 0]&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;[18 11 0]&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;[31 28 0]&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;[44 6 5 2 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;[6 5 0]&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;[19 18 17 14 0]&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;[32 31 30 10 0]&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;[45 4 3 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;[7 6 0]&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;[20 17 0]&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;[33 20 0]&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;[46 21 10 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;[8 6 5 4 0]&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;[21 19 0]&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;[34 15 14 1 0]&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;[47 14 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;[9 5 0]&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;[22 21 0]&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;[35 2 0]&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;[48 28 27 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;[10 7 0]&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;[23 18 0]&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;[36 11 0]&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;[49 9 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;[11 9 0]&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;[24 23 22 17 0]&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;[37 12 10 2 0]&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;[50 4 3 2 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;[12 11 8 6 0]&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;[25 22 0]&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;[38 6 5 1 0]&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;[51 6 3 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;[13 12 10 9 0]&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;[26 25 24 20 0]&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;[39 8 0]&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;[52 3 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;[14 13 8 4 0]&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;[27 26 25 22 0]&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;[40 5 4 3 0]&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;[53 6 2 1 0]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Digital Communications"></category><category term="LFSR"></category><category term="Digital"></category><category term="Communications"></category></entry><entry><title>Mathjax support in VS Code and Pelican</title><link href="https://yunchizhang.github.io/posts/mathjax_support.html" rel="alternate"></link><published>2025-05-02T15:20:00-05:00</published><updated>2025-05-02T15:20:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-05-02:/posts/mathjax_support.html</id><summary type="html">&lt;p&gt;Describe how to support Mathjax in VS Code and Pelican.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="mathjax"&gt;Mathjax&lt;/h2&gt;
&lt;p&gt;MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that
works in all modern browsers. Please refer to &lt;a class="ampl" href="https://www.mathjax.org/"&gt;Mathjax&lt;/a&gt;
for details.&lt;/p&gt;
&lt;h2 id="mathjax-in-vs-code"&gt;Mathjax in VS Code&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/download"&gt;VS Code&lt;/a&gt; uses &lt;em&gt;KaTeX&lt;/em&gt; by default as the math rendering
engine. VS Code extension &lt;a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced"&gt;Markdown Preview Enhanced
(MPE)&lt;/a&gt; is
the best option in VS Code if you want full MathJax support including equation numbering and
cross-referencing.&lt;/p&gt;
&lt;p&gt;After the installation of MPE extension, one can go to its setting to change &lt;code&gt;Math Rending Option&lt;/code&gt;
to &lt;code&gt;Mathjax&lt;/code&gt;. For equation numbering and cross-referencing, press:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Shift+P&lt;/code&gt; → &lt;strong&gt;Markdown Preview Enhanced: Open Config Script (Global)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copy the following json configuration into the opened &lt;code&gt;config.js&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"mathjaxConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"tex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;"inlineMath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"\\("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"\\)"&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;"displayMath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"$$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$$"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"\\["&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"\\]"&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ams"&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="mathjax-support-in-pelican"&gt;Mathjax Support in Pelican&lt;/h2&gt;
&lt;p&gt;Pelican plugin &lt;a href="https://github.com/pelican-plugins/render-math"&gt;render-math&lt;/a&gt; can be installed to
render mathematics in the generated pages. It accomplishes this by using the MathJax JavaScript
engine.&lt;/p&gt;
&lt;p&gt;To support equation numbering and cross-referencing, modify your theme’s HTML template to include
the correct MathJax config before the MathJax script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MathJax&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;tex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'ams'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Enable automatic equation numbering&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;inlineMath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'\\('&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'\\)'&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;displayMath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'$$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'$$'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'\\['&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'\\]'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="equation-numbering-and-cross-referencing"&gt;Equation Numbering and Cross-Referencing&lt;/h2&gt;
&lt;p&gt;In your Markdown file, write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$$
\begin{equation}
E = mc^2 \label{eq:einstein}
\end{equation}
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will result in:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{equation}
E = mc^2 \label{eq:einstein}
\end{equation}
$$&lt;/div&gt;
&lt;p&gt;The equation number will be automatically generated as long as &lt;code&gt;\begin{equation}&lt;/code&gt; and
&lt;code&gt;\end{equation}&lt;/code&gt; are used. The numbered equation can be referenced with its name indicated by
&lt;code&gt;\label{name}&lt;/code&gt;. To reference the above equation, &lt;code&gt;\ref{}&lt;/code&gt; can be used. One can write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Equation [\ref{eq:einstein}] can be used for ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will result in:&lt;/p&gt;
&lt;p&gt;Equation [\ref{eq:einstein}] can be used for ...&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Content Creation"></category><category term="pelican"></category><category term="markdown"></category><category term="webpage"></category><category term="mathjax"></category><category term="vs code"></category><category term="equation"></category></entry><entry><title>Markdown codeblock format for Pelican</title><link href="https://yunchizhang.github.io/posts/codeblock_markdown_pelican.html" rel="alternate"></link><published>2025-05-01T14:00:00-05:00</published><updated>2025-05-01T14:00:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2025-05-01:/posts/codeblock_markdown_pelican.html</id><summary type="html">&lt;p&gt;Describe how to write codeblock inside a list item in markdown.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="code-snippet-in-markdown"&gt;Code Snippet in Markdown&lt;/h2&gt;
&lt;h3 id="inline-code"&gt;Inline Code&lt;/h3&gt;
&lt;p&gt;The single &lt;strong&gt;backticks `&lt;/strong&gt; in Markdown can be used to indicate inline code. For example,
`inline code` is displayed as &lt;code&gt;inline code&lt;/code&gt;. This is also recognized by Pelican that uses
&lt;a href="https://pygments.org/"&gt;Pygments&lt;/a&gt; for code highlighting.&lt;/p&gt;
&lt;h3 id="codeblock"&gt;Codeblock&lt;/h3&gt;
&lt;p&gt;There are a few ways to indicate codeblock in Markdown. Two primary methods are usually employed:
Indented Code and "Fenced" Code Block.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Fenced Code Block is recommended to use for syntax highlighting purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="indented-code"&gt;Indented Code&lt;/h4&gt;
&lt;p&gt;Preceding all codes by an indent (4 spaces or tab).&lt;/p&gt;
&lt;p&gt;For example, the following indented block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # python code
    print(f"This is a test")
    print(f"This is another test")
    print(f"This is another test")
    print(f"This is another test")
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# python code
print(f"This is a test")
print(f"This is another test")
print(f"This is another test")
print(f"This is another test")
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is no syntax highlighting while using indented code since the language can not be specified.&lt;/p&gt;
&lt;h4 id="fenced-code-blocks"&gt;&lt;a href="https://python-markdown.github.io/extensions/fenced_code_blocks/"&gt;Fenced Code Blocks&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Use triple backticks (&lt;strong&gt;```&lt;/strong&gt;) or triple tildes (&lt;strong&gt;~~~&lt;/strong&gt;) and the name of the language. Fenced
code block usually support syntax highlighting since the language can be specified.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sb"&gt;```python&lt;/span&gt;
&lt;span class="c1"&gt;# python code&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is a test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# python code&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is a test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To include a set of backticks (or tildes) within a code block, use a different number of backticks
for the delimiters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;````
```
````
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;When using Fenced code block, &lt;strong&gt;```&lt;/strong&gt; or &lt;strong&gt;~~~&lt;/strong&gt; should not be indented, otherwise it will be treated as
indented code block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;Fenced Code Blocks are only supported at the document root level. Therefore, they cannot be
nested inside lists or blockquote's. If you need to nest fenced code blocks, you may want to try
the third party extension [SuperFences] instead.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="codeblock-syntax-highlighting-for-pelican"&gt;Codeblock Syntax Highlighting for Pelican&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Python-Markdown/markdown/"&gt;Python-Markdown&lt;/a&gt; uses
&lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;CodeHilite&lt;/a&gt; extension for syntax
highlighting. This extension is included in the standard Markdown library.&lt;/p&gt;
&lt;h3 id="fenced-code-block"&gt;Fenced Code Block&lt;/h3&gt;
&lt;p&gt;Various attributes may be defined on a per-code-block basis by defining them immediately following
the opening deliminator. The attributes should be wrapped in curly braces {} and be on the same
line as the deliminator. It is generally best to separate the attribute list from the deliminator
with a space. Attributes within the list must be separated by a space. So long as the language is
the only option specified, the curly brackets and/or the dot may be excluded.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;``` { attributes go here }
a code block with attributes
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The codehilite extension uses the &lt;a href="https://pygments.org/"&gt;Pygments&lt;/a&gt; engine to do syntax
highlighting. Any valid Pygments options can be defined as key/value pairs in the attribute list
and will be passed on to Pygments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;``` { .lang linenos=true linenostart=42 hl_lines="43-44 50" title="An Example Code Block" }`
A truncated code block...
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;``` {.python linenos=true linenostart=42 hl_lines="2 4" title="A Python Codeblock"}
&lt;span class="gh"&gt;# python code&lt;/span&gt;
print(f"This is a test")
print(f"This is another test")
print(f"This is another test")
print(f"This is another test")
print(f"This is another test")
print(f"This is another test")
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will produce:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;42&lt;/span&gt;
&lt;span class="normal"&gt;43&lt;/span&gt;
&lt;span class="normal"&gt;44&lt;/span&gt;
&lt;span class="normal"&gt;45&lt;/span&gt;
&lt;span class="normal"&gt;46&lt;/span&gt;
&lt;span class="normal"&gt;47&lt;/span&gt;
&lt;span class="normal"&gt;48&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# python code&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is a test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"This is another test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hl_lines&lt;/code&gt; should be specified by the actual line count number in the codeblock. Do not count the
line from &lt;code&gt;linenostart&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To disable syntax highlighting on an individual code block, include &lt;code&gt;use_pygments=false&lt;/code&gt; in the
attribute list. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;``` {.python use_pygments=false style="color: &lt;span class="ni"&gt;#030303&lt;/span&gt;; background: &lt;span class="ni"&gt;#f8f8f8&lt;/span&gt;;"}
&lt;span class="gh"&gt;# python code&lt;/span&gt;
print(f"This is a test")
print(f"This is another test")
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will produce:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python" style="color: #030303; background: #f8f8f8;"&gt;# python code
print(f"This is a test")
print(f"This is another test")
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="indented-code-block"&gt;Indented Code Block&lt;/h3&gt;
&lt;p&gt;Either &lt;strong&gt;Sheband&lt;/strong&gt; or &lt;strong&gt;Colons&lt;/strong&gt; can be used to tell CodeHilite what language the codeblock contains.&lt;/p&gt;
&lt;h4 id="shebang"&gt;Shebang&lt;/h4&gt;
&lt;p&gt;Line numbers will be displayed by default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    #!python
    # Code goes here ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will result in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#Code goes here ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;To highlight lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    #!python hl_lines="1 3"
    # This line is emphasized
    # This line isn't
    # This line is emphasized
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will result in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# This line isn't&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h4 id="colons"&gt;Colons&lt;/h4&gt;
&lt;p&gt;If the first line begins with three or more colons, the text following the colons identifies the
language. The first line is removed from the code block before processing and line numbers are not
used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    :::python
    # Code goes here ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will result in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Code goes here ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To highlight lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    :::python hl_lines="1 3"
    # This line is emphasized
    # This line isn't
    # This line is emphasized
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will result in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# This line isn't&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="markdown-codehilite-extension-for-pelican"&gt;Markdown CodeHilite Extension for Pelican&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;pelicanconf.py&lt;/code&gt;, CodeHilite should be configured to use &lt;code&gt;.highlight&lt;/code&gt; CSS class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"extension_configs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"markdown.extensions.codehilite"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"css_class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"highlight"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Content Creation"></category><category term="pelican"></category><category term="markdown"></category><category term="webpage"></category></entry><entry><title>Publish Pelican Webpages to Github Pages</title><link href="https://yunchizhang.github.io/posts/pelican_on_github.html" rel="alternate"></link><published>2024-09-29T10:46:00-05:00</published><updated>2025-05-02T12:44:00-05:00</updated><author><name>Yunchi Zhang</name></author><id>tag:yunchizhang.github.io,2024-09-29:/posts/pelican_on_github.html</id><summary type="html">&lt;p&gt;Describe how to publish Pelican generated webpages to Github pages.&lt;/p&gt;</summary><content type="html">
&lt;h1 id="pelican-and-github-pages"&gt;Pelican and Github Pages&lt;/h1&gt;
&lt;p&gt;You can publish &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; generated site to &lt;a href="https://pages.github.com/"&gt;GitHub
Pages&lt;/a&gt; for free. Your site will be published to &lt;code&gt;https://yourusername.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="ampl" href="https://docs.getpelican.com/en/latest/"&gt;Pelican document&lt;/a&gt; should be referenced for
&lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; installation and usages.&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a class="ampl" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for details.&lt;/p&gt;
&lt;h1 id="howto"&gt;HowTo&lt;/h1&gt;
&lt;p&gt;There are two ways to publish a site to GitHub Pages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Publish from a branch:&lt;/strong&gt; run &lt;code&gt;pelican&lt;/code&gt; locally and push the output directory to a special branch
   of your GitHub repo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publishing with a custom GitHub Actions Workflow:&lt;/strong&gt; just push the source files of your Pelican
   site to your GitHub repo's default branch and have a custom GitHub Actions workflow run
   &lt;code&gt;pelican&lt;/code&gt; to generate the output directory and publish to GitHub pages site.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first method will be discussed in this article.&lt;/p&gt;
&lt;h2 id="github-user-page"&gt;Github User Page&lt;/h2&gt;
&lt;p&gt;To publish your Pelican website to &lt;code&gt;https://yourusername.github.io&lt;/code&gt; (i.e., user site rather than
project site), GitHub requires the &lt;code&gt;gh-pages&lt;/code&gt; branch to be the root of the repository – no
subdirectory. The following procedure utilizes two branches in the repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configure GitHub Page&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On GitHub, create &lt;code&gt;yourusername.github.io&lt;/code&gt; repository with two branches.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; branch → for published site (HTML only)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelican&lt;/code&gt; branch → for your Pelican source files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go to &lt;strong&gt;Repo → Settings → Pages&lt;/strong&gt;. Under &lt;strong&gt;Source&lt;/strong&gt;, select:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Branch: &lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Folder: &lt;code&gt;/(root)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub will serve from: &lt;code&gt;https://yourusername.github.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clone the &lt;code&gt;yourusername.github.io&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/yourusername.github.io.git
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yourusername.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Create and switch to the &lt;code&gt;pelican&lt;/code&gt; branch:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;--orphan&lt;span class="w"&gt; &lt;/span&gt;pelican
git&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="pelican-webpage-generation"&gt;Pelican Webpage Generation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Install Pelican and Tools&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican&lt;span class="o"&gt;[&lt;/span&gt;markdown&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ghp-import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Initialize Pelican&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Choose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Site URL: &lt;code&gt;https:\\yourusername.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use relative URLs: Yes&lt;/li&gt;
&lt;li&gt;Generate Makefile: Yes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Commit and Push&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;.gitignore&lt;/code&gt;. Then,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Initial Pelican site"&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;pelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pelican Themes and Plugins&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A Pelican theme should be configured for site generation.
&lt;a href="https://elegant.oncrashreboot.com/"&gt;Elegant&lt;/a&gt; theme is recommended.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/Pelican-Elegant/elegant.git&lt;span class="w"&gt; &lt;/span&gt;themes/elegant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set the theme in &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'themes/elegant'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install your desired Pelican plugins. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican-render-math
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Write Contents and Preview&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Contents can be written in either Markdown or rStructureText format. In &lt;code&gt;windows&lt;/code&gt; system, a batch
file can be used to generate and preview webpages in a local server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican content &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;^&lt;/span&gt;
&lt;span class="se"&gt;s&lt;/span&gt;tart &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="s2"&gt;"http://localhost:8000/"&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;^&lt;/span&gt;
&lt;span class="se"&gt;p&lt;/span&gt;elican --listen &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;^&lt;/span&gt;
&lt;span class="se"&gt;R&lt;/span&gt;EM Ctrl-C to quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="deploy-generated-webpages"&gt;Deploy Generated Webpages&lt;/h2&gt;
&lt;p&gt;Pelican will generate output into output/. You’ll use &lt;code&gt;ghp-import&lt;/code&gt; to publish that to &lt;code&gt;main&lt;/code&gt;
branch. Batch files in &lt;code&gt;windows&lt;/code&gt; system can be used for this purpose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pelican&lt;/code&gt; Branch (&lt;code&gt;publish_private.bat&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout pelican
git add .
git commit -a -m &lt;span class="nv"&gt;%1&lt;/span&gt;
git push -u origin pelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;main&lt;/code&gt; Branch (&lt;code&gt;publish_public.bat&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican content -o output -ds publishconf.py &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;^&lt;/span&gt;
&lt;span class="se"&gt;g&lt;/span&gt;hp-import output -r origin -b main &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;^&lt;/span&gt;
&lt;span class="se"&gt;g&lt;/span&gt;it push origin main
git checkout pelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Batch File to Call Both (&lt;code&gt;publish.bat&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;REM .\publish "some comment" # when called inside PS&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; publish_private.bat &lt;span class="nv"&gt;%1&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; publish_public.bat
&lt;span class="k"&gt;ECHO&lt;/span&gt; Done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="editor"&gt;Editor&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/download"&gt;VS Code&lt;/a&gt; is suggested for creating the contents.&lt;/p&gt;
&lt;h1 id="tips"&gt;Tips&lt;/h1&gt;
&lt;h2 id="nested-list"&gt;Nested List&lt;/h2&gt;
&lt;p&gt;For nested list, Python-Markdown uses four-space indents. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Visual Narration**&lt;/span&gt;: Description here
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Story Arcs and Pacing**&lt;/span&gt;:
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 1, two space indent
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 2, two space indent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;works for some Markdown parser, but not for Python-Markdown. Python-Markdown (also Pelican) will
produce:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visual Narration&lt;/strong&gt;: Description here&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Story Arcs and Pacing&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Sub-item 1, two space indent&lt;/li&gt;
&lt;li&gt;Sub-item 2, two space indent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It must be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Visual Narration**&lt;/span&gt;: Description here
&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="gs"&gt;**Story Arcs and Pacing**&lt;/span&gt;:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 1, four space indent
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 2, four space indent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for Python-Markdown (as well as Pelican) to parse correctly. It will result in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visual Narration&lt;/strong&gt;: Description here&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Story Arcs and Pacing&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Sub-item 1, four space indent&lt;/li&gt;
&lt;li&gt;Sub-item 2, four space indent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;1.&lt;/span&gt; &lt;span class="gs"&gt;**Visual Narration**&lt;/span&gt;: Description here
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 1, four space indent
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 2, four space indent
&lt;span class="k"&gt;2.&lt;/span&gt; &lt;span class="gs"&gt;**Story Arcs and Pacing**&lt;/span&gt;:
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 1, four space indent
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sub-item 2, four space indent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will produce:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Visual Narration&lt;/strong&gt;: Description here&lt;ul&gt;
&lt;li&gt;Sub-item 1, four space indent&lt;/li&gt;
&lt;li&gt;Sub-item 2, four space indent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Story Arcs and Pacing&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Sub-item 1, four space indent&lt;/li&gt;
&lt;li&gt;Sub-item 2, four space indent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Content Creation"></category><category term="pelican"></category><category term="github"></category><category term="python"></category><category term="webpage"></category></entry></feed>